{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "lib/browser/fileReader.js",
    "lib/browser/fileSignature.js",
    "lib/browser/httpStack.js",
    "lib/browser/index.js",
    "lib/browser/isReactNative.js",
    "lib/browser/sources/FileSource.js",
    "lib/browser/sources/StreamSource.js",
    "lib/browser/sources/isCordova.js",
    "lib/browser/sources/readAsByteArray.js",
    "lib/browser/uriToBlob.js",
    "lib/browser/urlStorage.js",
    "lib/error.js",
    "lib/logger.js",
    "lib/noopUrlStorage.js",
    "lib/upload.js",
    "lib/uuid.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "import isReactNative from './isReactNative.js'\nimport uriToBlob from './uriToBlob.js'\n\nimport FileSource from './sources/FileSource.js'\nimport StreamSource from './sources/StreamSource.js'\n\nexport default class FileReader {\n  async openFile(input, chunkSize) {\n    // In React Native, when user selects a file, instead of a File or Blob,\n    // you usually get a file object {} with a uri property that contains\n    // a local path to the file. We use XMLHttpRequest to fetch\n    // the file blob, before uploading with tus.\n    if (isReactNative() && input && typeof input.uri !== 'undefined') {\n      try {\n        const blob = await uriToBlob(input.uri)\n        return new FileSource(blob)\n      } catch (err) {\n        throw new Error(\n          `tus: cannot fetch \\`file.uri\\` as Blob, make sure the uri is correct and accessible. ${err}`,\n        )\n      }\n    }\n\n    // Since we emulate the Blob type in our tests (not all target browsers\n    // support it), we cannot use `instanceof` for testing whether the input value\n    // can be handled. Instead, we simply check is the slice() function and the\n    // size property are available.\n    if (typeof input.slice === 'function' && typeof input.size !== 'undefined') {\n      return Promise.resolve(new FileSource(input))\n    }\n\n    if (typeof input.read === 'function') {\n      chunkSize = Number(chunkSize)\n      if (!Number.isFinite(chunkSize)) {\n        return Promise.reject(\n          new Error(\n            'cannot create source for stream without a finite value for the `chunkSize` option',\n          ),\n        )\n      }\n\n      return Promise.resolve(new StreamSource(input, chunkSize))\n    }\n\n    return Promise.reject(\n      new Error(\n        'source object may only be an instance of File, Blob, or Reader in this environment',\n      ),\n    )\n  }\n}\n",
    "import isReactNative from './isReactNative.js'\n\n// TODO: Differenciate between input types\n\n/**\n * Generate a fingerprint for a file which will be used the store the endpoint\n *\n * @param {File} file\n * @param {Object} options\n * @param {Function} callback\n */\nexport default function fingerprint(file, options) {\n  if (isReactNative()) {\n    return Promise.resolve(reactNativeFingerprint(file, options))\n  }\n\n  return Promise.resolve(\n    ['tus-br', file.name, file.type, file.size, file.lastModified, options.endpoint].join('-'),\n  )\n}\n\nfunction reactNativeFingerprint(file, options) {\n  const exifHash = file.exif ? hashCode(JSON.stringify(file.exif)) : 'noexif'\n  return ['tus-rn', file.name || 'noname', file.size || 'nosize', exifHash, options.endpoint].join(\n    '/',\n  )\n}\n\nfunction hashCode(str) {\n  /* eslint-disable no-bitwise */\n  // from https://stackoverflow.com/a/8831937/151666\n  let hash = 0\n  if (str.length === 0) {\n    return hash\n  }\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i)\n    hash = (hash << 5) - hash + char\n    hash &= hash // Convert to 32bit integer\n  }\n  return hash\n}\n",
    "/* eslint-disable max-classes-per-file */\nexport default class XHRHttpStack {\n  createRequest(method, url) {\n    return new Request(method, url)\n  }\n\n  getName() {\n    return 'XHRHttpStack'\n  }\n}\n\nclass Request {\n  constructor(method, url) {\n    this._xhr = new XMLHttpRequest()\n    this._xhr.open(method, url, true)\n\n    this._method = method\n    this._url = url\n    this._headers = {}\n  }\n\n  getMethod() {\n    return this._method\n  }\n\n  getURL() {\n    return this._url\n  }\n\n  setHeader(header, value) {\n    this._xhr.setRequestHeader(header, value)\n    this._headers[header] = value\n  }\n\n  getHeader(header) {\n    return this._headers[header]\n  }\n\n  setProgressHandler(progressHandler) {\n    // Test support for progress events before attaching an event listener\n    if (!('upload' in this._xhr)) {\n      return\n    }\n\n    this._xhr.upload.onprogress = (e) => {\n      if (!e.lengthComputable) {\n        return\n      }\n\n      progressHandler(e.loaded)\n    }\n  }\n\n  send(body = null) {\n    return new Promise((resolve, reject) => {\n      this._xhr.onload = () => {\n        resolve(new Response(this._xhr))\n      }\n\n      this._xhr.onerror = (err) => {\n        reject(err)\n      }\n\n      this._xhr.send(body)\n    })\n  }\n\n  abort() {\n    this._xhr.abort()\n    return Promise.resolve()\n  }\n\n  getUnderlyingObject() {\n    return this._xhr\n  }\n}\n\nclass Response {\n  constructor(xhr) {\n    this._xhr = xhr\n  }\n\n  getStatus() {\n    return this._xhr.status\n  }\n\n  getHeader(header) {\n    return this._xhr.getResponseHeader(header)\n  }\n\n  getBody() {\n    return this._xhr.responseText\n  }\n\n  getUnderlyingObject() {\n    return this._xhr\n  }\n}\n",
    "import BaseUpload from '../upload.js'\nimport NoopUrlStorage from '../noopUrlStorage.js'\nimport { enableDebugLog } from '../logger.js'\nimport DetailedError from '../error.js'\n\nimport { canStoreURLs, WebStorageUrlStorage } from './urlStorage.js'\nimport DefaultHttpStack from './httpStack.js'\nimport FileReader from './fileReader.js'\nimport fingerprint from './fileSignature.js'\n\nconst defaultOptions = {\n  ...BaseUpload.defaultOptions,\n  httpStack: new DefaultHttpStack(),\n  fileReader: new FileReader(),\n  urlStorage: canStoreURLs ? new WebStorageUrlStorage() : new NoopUrlStorage(),\n  fingerprint,\n}\n\nclass Upload extends BaseUpload {\n  constructor(file = null, options = {}) {\n    options = { ...defaultOptions, ...options }\n    super(file, options)\n  }\n\n  static terminate(url, options = {}) {\n    options = { ...defaultOptions, ...options }\n    return BaseUpload.terminate(url, options)\n  }\n}\n\n// Note: We don't reference `window` here because these classes also exist in a Web Worker's context.\nconst isSupported =\n  typeof XMLHttpRequest === 'function' &&\n  typeof Blob === 'function' &&\n  typeof Blob.prototype.slice === 'function'\n\nexport {\n  Upload,\n  canStoreURLs,\n  defaultOptions,\n  isSupported,\n  enableDebugLog,\n  DefaultHttpStack,\n  DetailedError,\n}\n",
    "const isReactNative = () =>\n  typeof navigator !== 'undefined' &&\n  typeof navigator.product === 'string' &&\n  navigator.product.toLowerCase() === 'reactnative'\n\nexport default isReactNative\n",
    "import isCordova from './isCordova.js'\nimport readAsByteArray from './readAsByteArray.js'\n\nexport default class FileSource {\n  // Make this.size a method\n  constructor(file) {\n    this._file = file\n    this.size = file.size\n  }\n\n  slice(start, end) {\n    // In Apache Cordova applications, a File must be resolved using\n    // FileReader instances, see\n    // https://cordova.apache.org/docs/en/8.x/reference/cordova-plugin-file/index.html#read-a-file\n    if (isCordova()) {\n      return readAsByteArray(this._file.slice(start, end))\n    }\n\n    const value = this._file.slice(start, end)\n    const done = end >= this.size\n    return Promise.resolve({ value, done })\n  }\n\n  close() {\n    // Nothing to do here since we don't need to release any resources.\n  }\n}\n",
    "function len(blobOrArray) {\n  if (blobOrArray === undefined) return 0\n  if (blobOrArray.size !== undefined) return blobOrArray.size\n  return blobOrArray.length\n}\n\n/*\n  Typed arrays and blobs don't have a concat method.\n  This function helps StreamSource accumulate data to reach chunkSize.\n*/\nfunction concat(a, b) {\n  if (a.concat) {\n    // Is `a` an Array?\n    return a.concat(b)\n  }\n  if (a instanceof Blob) {\n    return new Blob([a, b], { type: a.type })\n  }\n  if (a.set) {\n    // Is `a` a typed array?\n    const c = new a.constructor(a.length + b.length)\n    c.set(a)\n    c.set(b, a.length)\n    return c\n  }\n  throw new Error('Unknown data type')\n}\n\nexport default class StreamSource {\n  constructor(reader) {\n    this._buffer = undefined\n    this._bufferOffset = 0\n    this._reader = reader\n    this._done = false\n  }\n\n  slice(start, end) {\n    if (start < this._bufferOffset) {\n      return Promise.reject(new Error(\"Requested data is before the reader's current offset\"))\n    }\n\n    return this._readUntilEnoughDataOrDone(start, end)\n  }\n\n  _readUntilEnoughDataOrDone(start, end) {\n    const hasEnoughData = end <= this._bufferOffset + len(this._buffer)\n    if (this._done || hasEnoughData) {\n      const value = this._getDataFromBuffer(start, end)\n      const done = value == null ? this._done : false\n      return Promise.resolve({ value, done })\n    }\n\n    return this._reader.read().then(({ value, done }) => {\n      if (done) {\n        this._done = true\n      } else if (this._buffer === undefined) {\n        this._buffer = value\n      } else {\n        this._buffer = concat(this._buffer, value)\n      }\n\n      return this._readUntilEnoughDataOrDone(start, end)\n    })\n  }\n\n  _getDataFromBuffer(start, end) {\n    // Remove data from buffer before `start`.\n    // Data might be reread from the buffer if an upload fails, so we can only\n    // safely delete data when it comes *before* what is currently being read.\n    if (start > this._bufferOffset) {\n      this._buffer = this._buffer.slice(start - this._bufferOffset)\n      this._bufferOffset = start\n    }\n    // If the buffer is empty after removing old data, all data has been read.\n    const hasAllDataBeenRead = len(this._buffer) === 0\n    if (this._done && hasAllDataBeenRead) {\n      return null\n    }\n    // We already removed data before `start`, so we just return the first\n    // chunk from the buffer.\n    return this._buffer.slice(0, end - start)\n  }\n\n  close() {\n    if (this._reader.cancel) {\n      this._reader.cancel()\n    }\n  }\n}\n",
    "const isCordova = () =>\n  typeof window !== 'undefined' &&\n  (typeof window.PhoneGap !== 'undefined' ||\n    typeof window.Cordova !== 'undefined' ||\n    typeof window.cordova !== 'undefined')\n\nexport default isCordova\n",
    "/**\n * readAsByteArray converts a File object to a Uint8Array.\n * This function is only used on the Apache Cordova platform.\n * See https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-file/index.html#read-a-file\n */\nexport default function readAsByteArray(chunk) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader()\n    reader.onload = () => {\n      const value = new Uint8Array(reader.result)\n      resolve({ value })\n    }\n    reader.onerror = (err) => {\n      reject(err)\n    }\n    reader.readAsArrayBuffer(chunk)\n  })\n}\n",
    "/**\n * uriToBlob resolves a URI to a Blob object. This is used for\n * React Native to retrieve a file (identified by a file://\n * URI) as a blob.\n */\nexport default function uriToBlob(uri) {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest()\n    xhr.responseType = 'blob'\n    xhr.onload = () => {\n      const blob = xhr.response\n      resolve(blob)\n    }\n    xhr.onerror = (err) => {\n      reject(err)\n    }\n    xhr.open('GET', uri)\n    xhr.send()\n  })\n}\n",
    "let hasStorage = false\ntry {\n  // Note: localStorage does not exist in the Web Worker's context, so we must use window here.\n  hasStorage = 'localStorage' in window\n\n  // Attempt to store and read entries from the local storage to detect Private\n  // Mode on Safari on iOS (see #49)\n  // If the key was not used before, we remove it from local storage again to\n  // not cause confusion where the entry came from.\n  const key = 'tusSupport'\n  const originalValue = localStorage.getItem(key)\n  localStorage.setItem(key, originalValue)\n  if (originalValue === null) localStorage.removeItem(key)\n} catch (e) {\n  // If we try to access localStorage inside a sandboxed iframe, a SecurityError\n  // is thrown. When in private mode on iOS Safari, a QuotaExceededError is\n  // thrown (see #49)\n  if (e.code === e.SECURITY_ERR || e.code === e.QUOTA_EXCEEDED_ERR) {\n    hasStorage = false\n  } else {\n    throw e\n  }\n}\n\nexport const canStoreURLs = hasStorage\n\nexport class WebStorageUrlStorage {\n  findAllUploads() {\n    const results = this._findEntries('tus::')\n    return Promise.resolve(results)\n  }\n\n  findUploadsByFingerprint(fingerprint) {\n    const results = this._findEntries(`tus::${fingerprint}::`)\n    return Promise.resolve(results)\n  }\n\n  removeUpload(urlStorageKey) {\n    localStorage.removeItem(urlStorageKey)\n    return Promise.resolve()\n  }\n\n  addUpload(fingerprint, upload) {\n    const id = Math.round(Math.random() * 1e12)\n    const key = `tus::${fingerprint}::${id}`\n\n    localStorage.setItem(key, JSON.stringify(upload))\n    return Promise.resolve(key)\n  }\n\n  _findEntries(prefix) {\n    const results = []\n\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i)\n      if (key.indexOf(prefix) !== 0) continue\n\n      try {\n        const upload = JSON.parse(localStorage.getItem(key))\n        upload.urlStorageKey = key\n\n        results.push(upload)\n      } catch (e) {\n        // The JSON parse error is intentionally ignored here, so a malformed\n        // entry in the storage cannot prevent an upload.\n      }\n    }\n\n    return results\n  }\n}\n",
    "class DetailedError extends Error {\n  constructor(message, causingErr = null, req = null, res = null) {\n    super(message)\n\n    this.originalRequest = req\n    this.originalResponse = res\n    this.causingError = causingErr\n\n    if (causingErr != null) {\n      message += `, caused by ${causingErr.toString()}`\n    }\n\n    if (req != null) {\n      const requestId = req.getHeader('X-Request-ID') || 'n/a'\n      const method = req.getMethod()\n      const url = req.getURL()\n      const status = res ? res.getStatus() : 'n/a'\n      const body = res ? res.getBody() || '' : 'n/a'\n      message += `, originated from request (method: ${method}, url: ${url}, response code: ${status}, response text: ${body}, request id: ${requestId})`\n    }\n    this.message = message\n  }\n}\n\nexport default DetailedError\n",
    "/* eslint no-console: \"off\" */\n\nlet isEnabled = false\n\nexport function enableDebugLog() {\n  isEnabled = true\n}\n\nexport function log(msg) {\n  if (!isEnabled) return\n  console.log(msg)\n}\n",
    "/* eslint no-unused-vars: \"off\" */\n\nexport default class NoopUrlStorage {\n  listAllUploads() {\n    return Promise.resolve([])\n  }\n\n  findUploadsByFingerprint(fingerprint) {\n    return Promise.resolve([])\n  }\n\n  removeUpload(urlStorageKey) {\n    return Promise.resolve()\n  }\n\n  addUpload(fingerprint, upload) {\n    return Promise.resolve(null)\n  }\n}\n",
    "import DetailedError from './error.js'\nimport { log } from './logger.js'\nimport uuid from './uuid.js'\n\nconst PROTOCOL_TUS_V1 = 'tus-v1'\nconst PROTOCOL_IETF_DRAFT_03 = 'ietf-draft-03'\n\nconst defaultOptions = {\n  endpoint: null,\n\n  uploadUrl: null,\n  metadata: {},\n  fingerprint: null,\n  uploadSize: null,\n\n  onProgress: null,\n  onChunkComplete: null,\n  onSuccess: null,\n  onError: null,\n  onUploadUrlAvailable: null,\n\n  overridePatchMethod: false,\n  headers: {},\n  addRequestId: false,\n  onBeforeRequest: null,\n  onAfterResponse: null,\n  onShouldRetry: defaultOnShouldRetry,\n\n  chunkSize: Infinity,\n  retryDelays: [0, 1000, 3000, 5000],\n  parallelUploads: 1,\n  parallelUploadBoundaries: null,\n  storeFingerprintForResuming: true,\n  removeFingerprintOnSuccess: false,\n  uploadLengthDeferred: false,\n  uploadDataDuringCreation: false,\n\n  urlStorage: null,\n  fileReader: null,\n  httpStack: null,\n\n  protocol: PROTOCOL_TUS_V1,\n}\n\nclass BaseUpload {\n  constructor(file, options) {\n    // Warn about removed options from previous versions\n    if ('resume' in options) {\n      // eslint-disable-next-line no-console\n      console.log(\n        'tus: The `resume` option has been removed in tus-js-client v2. Please use the URL storage API instead.',\n      )\n    }\n\n    // The default options will already be added from the wrapper classes.\n    this.options = options\n\n    // Cast chunkSize to integer\n    this.options.chunkSize = Number(this.options.chunkSize)\n\n    // The storage module used to store URLs\n    this._urlStorage = this.options.urlStorage\n\n    // The underlying File/Blob object\n    this.file = file\n\n    // The URL against which the file will be uploaded\n    this.url = null\n\n    // The underlying request object for the current PATCH request\n    this._req = null\n\n    // The fingerpinrt for the current file (set after start())\n    this._fingerprint = null\n\n    // The key that the URL storage returned when saving an URL with a fingerprint,\n    this._urlStorageKey = null\n\n    // The offset used in the current PATCH request\n    this._offset = null\n\n    // True if the current PATCH request has been aborted\n    this._aborted = false\n\n    // The file's size in bytes\n    this._size = null\n\n    // The Source object which will wrap around the given file and provides us\n    // with a unified interface for getting its size and slice chunks from its\n    // content allowing us to easily handle Files, Blobs, Buffers and Streams.\n    this._source = null\n\n    // The current count of attempts which have been made. Zero indicates none.\n    this._retryAttempt = 0\n\n    // The timeout's ID which is used to delay the next retry\n    this._retryTimeout = null\n\n    // The offset of the remote upload before the latest attempt was started.\n    this._offsetBeforeRetry = 0\n\n    // An array of BaseUpload instances which are used for uploading the different\n    // parts, if the parallelUploads option is used.\n    this._parallelUploads = null\n\n    // An array of upload URLs which are used for uploading the different\n    // parts, if the parallelUploads option is used.\n    this._parallelUploadUrls = null\n  }\n\n  /**\n   * Use the Termination extension to delete an upload from the server by sending a DELETE\n   * request to the specified upload URL. This is only possible if the server supports the\n   * Termination extension. If the `options.retryDelays` property is set, the method will\n   * also retry if an error ocurrs.\n   *\n   * @param {String} url The upload's URL which will be terminated.\n   * @param {object} options Optional options for influencing HTTP requests.\n   * @return {Promise} The Promise will be resolved/rejected when the requests finish.\n   */\n  static terminate(url, options = {}) {\n    const req = openRequest('DELETE', url, options)\n\n    return sendRequest(req, null, options)\n      .then((res) => {\n        // A 204 response indicates a successfull request\n        if (res.getStatus() === 204) {\n          return\n        }\n\n        throw new DetailedError('tus: unexpected response while terminating upload', null, req, res)\n      })\n      .catch((err) => {\n        if (!(err instanceof DetailedError)) {\n          err = new DetailedError('tus: failed to terminate upload', err, req, null)\n        }\n\n        if (!shouldRetry(err, 0, options)) {\n          throw err\n        }\n\n        // Instead of keeping track of the retry attempts, we remove the first element from the delays\n        // array. If the array is empty, all retry attempts are used up and we will bubble up the error.\n        // We recursively call the terminate function will removing elements from the retryDelays array.\n        const delay = options.retryDelays[0]\n        const remainingDelays = options.retryDelays.slice(1)\n        const newOptions = {\n          ...options,\n          retryDelays: remainingDelays,\n        }\n        return new Promise((resolve) => setTimeout(resolve, delay)).then(() =>\n          BaseUpload.terminate(url, newOptions),\n        )\n      })\n  }\n\n  findPreviousUploads() {\n    return this.options\n      .fingerprint(this.file, this.options)\n      .then((fingerprint) => this._urlStorage.findUploadsByFingerprint(fingerprint))\n  }\n\n  resumeFromPreviousUpload(previousUpload) {\n    this.url = previousUpload.uploadUrl || null\n    this._parallelUploadUrls = previousUpload.parallelUploadUrls || null\n    this._urlStorageKey = previousUpload.urlStorageKey\n  }\n\n  start() {\n    const { file } = this\n\n    if (!file) {\n      this._emitError(new Error('tus: no file or stream to upload provided'))\n      return\n    }\n\n    if (![PROTOCOL_TUS_V1, PROTOCOL_IETF_DRAFT_03].includes(this.options.protocol)) {\n      this._emitError(new Error(`tus: unsupported protocol ${this.options.protocol}`))\n      return\n    }\n\n    if (!this.options.endpoint && !this.options.uploadUrl && !this.url) {\n      this._emitError(new Error('tus: neither an endpoint or an upload URL is provided'))\n      return\n    }\n\n    const { retryDelays } = this.options\n    if (retryDelays != null && Object.prototype.toString.call(retryDelays) !== '[object Array]') {\n      this._emitError(new Error('tus: the `retryDelays` option must either be an array or null'))\n      return\n    }\n\n    if (this.options.parallelUploads > 1) {\n      // Test which options are incompatible with parallel uploads.\n      for (const optionName of ['uploadUrl', 'uploadSize', 'uploadLengthDeferred']) {\n        if (this.options[optionName]) {\n          this._emitError(\n            new Error(`tus: cannot use the ${optionName} option when parallelUploads is enabled`),\n          )\n          return\n        }\n      }\n    }\n\n    if (this.options.parallelUploadBoundaries) {\n      if (this.options.parallelUploads <= 1) {\n        this._emitError(\n          new Error(\n            'tus: cannot use the `parallelUploadBoundaries` option when `parallelUploads` is disabled',\n          ),\n        )\n        return\n      }\n      if (this.options.parallelUploads !== this.options.parallelUploadBoundaries.length) {\n        this._emitError(\n          new Error(\n            'tus: the `parallelUploadBoundaries` must have the same length as the value of `parallelUploads`',\n          ),\n        )\n        return\n      }\n    }\n\n    this.options\n      .fingerprint(file, this.options)\n      .then((fingerprint) => {\n        if (fingerprint == null) {\n          log(\n            'No fingerprint was calculated meaning that the upload cannot be stored in the URL storage.',\n          )\n        } else {\n          log(`Calculated fingerprint: ${fingerprint}`)\n        }\n\n        this._fingerprint = fingerprint\n\n        if (this._source) {\n          return this._source\n        }\n        return this.options.fileReader.openFile(file, this.options.chunkSize)\n      })\n      .then((source) => {\n        this._source = source\n\n        // First, we look at the uploadLengthDeferred option.\n        // Next, we check if the caller has supplied a manual upload size.\n        // Finally, we try to use the calculated size from the source object.\n        if (this.options.uploadLengthDeferred) {\n          this._size = null\n        } else if (this.options.uploadSize != null) {\n          this._size = Number(this.options.uploadSize)\n          if (Number.isNaN(this._size)) {\n            this._emitError(new Error('tus: cannot convert `uploadSize` option into a number'))\n            return\n          }\n        } else {\n          this._size = this._source.size\n          if (this._size == null) {\n            this._emitError(\n              new Error(\n                \"tus: cannot automatically derive upload's size from input. Specify it manually using the `uploadSize` option or use the `uploadLengthDeferred` option\",\n              ),\n            )\n            return\n          }\n        }\n\n        // If the upload was configured to use multiple requests or if we resume from\n        // an upload which used multiple requests, we start a parallel upload.\n        if (this.options.parallelUploads > 1 || this._parallelUploadUrls != null) {\n          this._startParallelUpload()\n        } else {\n          this._startSingleUpload()\n        }\n      })\n      .catch((err) => {\n        this._emitError(err)\n      })\n  }\n\n  /**\n   * Initiate the uploading procedure for a parallelized upload, where one file is split into\n   * multiple request which are run in parallel.\n   *\n   * @api private\n   */\n  _startParallelUpload() {\n    const totalSize = this._size\n    let totalProgress = 0\n    this._parallelUploads = []\n\n    const partCount =\n      this._parallelUploadUrls != null\n        ? this._parallelUploadUrls.length\n        : this.options.parallelUploads\n\n    // The input file will be split into multiple slices which are uploaded in separate\n    // requests. Here we get the start and end position for the slices.\n    const parts =\n      this.options.parallelUploadBoundaries ?? splitSizeIntoParts(this._source.size, partCount)\n\n    // Attach URLs from previous uploads, if available.\n    if (this._parallelUploadUrls) {\n      parts.forEach((part, index) => {\n        part.uploadUrl = this._parallelUploadUrls[index] || null\n      })\n    }\n\n    // Create an empty list for storing the upload URLs\n    this._parallelUploadUrls = new Array(parts.length)\n\n    // Generate a promise for each slice that will be resolve if the respective\n    // upload is completed.\n    const uploads = parts.map((part, index) => {\n      let lastPartProgress = 0\n\n      return this._source.slice(part.start, part.end).then(\n        ({ value }) =>\n          new Promise((resolve, reject) => {\n            // Merge with the user supplied options but overwrite some values.\n            const options = {\n              ...this.options,\n              // If available, the partial upload should be resumed from a previous URL.\n              uploadUrl: part.uploadUrl || null,\n              // We take manually care of resuming for partial uploads, so they should\n              // not be stored in the URL storage.\n              storeFingerprintForResuming: false,\n              removeFingerprintOnSuccess: false,\n              // Reset the parallelUploads option to not cause recursion.\n              parallelUploads: 1,\n              // Reset this option as we are not doing a parallel upload.\n              parallelUploadBoundaries: null,\n              metadata: {},\n              // Add the header to indicate the this is a partial upload.\n              headers: {\n                ...this.options.headers,\n                'Upload-Concat': 'partial',\n              },\n              // Reject or resolve the promise if the upload errors or completes.\n              onSuccess: resolve,\n              onError: reject,\n              // Based in the progress for this partial upload, calculate the progress\n              // for the entire final upload.\n              onProgress: (newPartProgress) => {\n                totalProgress = totalProgress - lastPartProgress + newPartProgress\n                lastPartProgress = newPartProgress\n                this._emitProgress(totalProgress, totalSize)\n              },\n              // Wait until every partial upload has an upload URL, so we can add\n              // them to the URL storage.\n              onUploadUrlAvailable: () => {\n                this._parallelUploadUrls[index] = upload.url\n                // Test if all uploads have received an URL\n                if (this._parallelUploadUrls.filter((u) => Boolean(u)).length === parts.length) {\n                  this._saveUploadInUrlStorage()\n                }\n              },\n            }\n\n            const upload = new BaseUpload(value, options)\n            upload.start()\n\n            // Store the upload in an array, so we can later abort them if necessary.\n            this._parallelUploads.push(upload)\n          }),\n      )\n    })\n\n    let req\n    // Wait until all partial uploads are finished and we can send the POST request for\n    // creating the final upload.\n    Promise.all(uploads)\n      .then(() => {\n        req = this._openRequest('POST', this.options.endpoint)\n        req.setHeader('Upload-Concat', `final;${this._parallelUploadUrls.join(' ')}`)\n\n        // Add metadata if values have been added\n        const metadata = encodeMetadata(this.options.metadata)\n        if (metadata !== '') {\n          req.setHeader('Upload-Metadata', metadata)\n        }\n\n        return this._sendRequest(req, null)\n      })\n      .then((res) => {\n        if (!inStatusCategory(res.getStatus(), 200)) {\n          this._emitHttpError(req, res, 'tus: unexpected response while creating upload')\n          return\n        }\n\n        const location = res.getHeader('Location')\n        if (location == null) {\n          this._emitHttpError(req, res, 'tus: invalid or missing Location header')\n          return\n        }\n\n        this.url = resolveUrl(this.options.endpoint, location)\n        log(`Created upload at ${this.url}`)\n\n        this._emitSuccess()\n      })\n      .catch((err) => {\n        this._emitError(err)\n      })\n  }\n\n  /**\n   * Initiate the uploading procedure for a non-parallel upload. Here the entire file is\n   * uploaded in a sequential matter.\n   *\n   * @api private\n   */\n  _startSingleUpload() {\n    // Reset the aborted flag when the upload is started or else the\n    // _performUpload will stop before sending a request if the upload has been\n    // aborted previously.\n    this._aborted = false\n\n    // The upload had been started previously and we should reuse this URL.\n    if (this.url != null) {\n      log(`Resuming upload from previous URL: ${this.url}`)\n      this._resumeUpload()\n      return\n    }\n\n    // A URL has manually been specified, so we try to resume\n    if (this.options.uploadUrl != null) {\n      log(`Resuming upload from provided URL: ${this.options.uploadUrl}`)\n      this.url = this.options.uploadUrl\n      this._resumeUpload()\n      return\n    }\n\n    // An upload has not started for the file yet, so we start a new one\n    log('Creating a new upload')\n    this._createUpload()\n  }\n\n  /**\n   * Abort any running request and stop the current upload. After abort is called, no event\n   * handler will be invoked anymore. You can use the `start` method to resume the upload\n   * again.\n   * If `shouldTerminate` is true, the `terminate` function will be called to remove the\n   * current upload from the server.\n   *\n   * @param {boolean} shouldTerminate True if the upload should be deleted from the server.\n   * @return {Promise} The Promise will be resolved/rejected when the requests finish.\n   */\n  abort(shouldTerminate) {\n    // Stop any parallel partial uploads, that have been started in _startParallelUploads.\n    if (this._parallelUploads != null) {\n      this._parallelUploads.forEach((upload) => {\n        upload.abort(shouldTerminate)\n      })\n    }\n\n    // Stop any current running request.\n    if (this._req !== null) {\n      this._req.abort()\n      // Note: We do not close the file source here, so the user can resume in the future.\n    }\n    this._aborted = true\n\n    // Stop any timeout used for initiating a retry.\n    if (this._retryTimeout != null) {\n      clearTimeout(this._retryTimeout)\n      this._retryTimeout = null\n    }\n\n    if (!shouldTerminate || this.url == null) {\n      return Promise.resolve()\n    }\n\n    return (\n      BaseUpload.terminate(this.url, this.options)\n        // Remove entry from the URL storage since the upload URL is no longer valid.\n        .then(() => this._removeFromUrlStorage())\n    )\n  }\n\n  _emitHttpError(req, res, message, causingErr) {\n    this._emitError(new DetailedError(message, causingErr, req, res))\n  }\n\n  _emitError(err) {\n    // Do not emit errors, e.g. from aborted HTTP requests, if the upload has been stopped.\n    if (this._aborted) return\n\n    // Check if we should retry, when enabled, before sending the error to the user.\n    if (this.options.retryDelays != null) {\n      // We will reset the attempt counter if\n      // - we were already able to connect to the server (offset != null) and\n      // - we were able to upload a small chunk of data to the server\n      const shouldResetDelays = this._offset != null && this._offset > this._offsetBeforeRetry\n      if (shouldResetDelays) {\n        this._retryAttempt = 0\n      }\n\n      if (shouldRetry(err, this._retryAttempt, this.options)) {\n        const delay = this.options.retryDelays[this._retryAttempt++]\n\n        this._offsetBeforeRetry = this._offset\n\n        this._retryTimeout = setTimeout(() => {\n          this.start()\n        }, delay)\n        return\n      }\n    }\n\n    if (typeof this.options.onError === 'function') {\n      this.options.onError(err)\n    } else {\n      throw err\n    }\n  }\n\n  /**\n   * Publishes notification if the upload has been successfully completed.\n   *\n   * @api private\n   */\n  _emitSuccess() {\n    if (this.options.removeFingerprintOnSuccess) {\n      // Remove stored fingerprint and corresponding endpoint. This causes\n      // new uploads of the same file to be treated as a different file.\n      this._removeFromUrlStorage()\n    }\n\n    if (typeof this.options.onSuccess === 'function') {\n      this.options.onSuccess()\n    }\n  }\n\n  /**\n   * Publishes notification when data has been sent to the server. This\n   * data may not have been accepted by the server yet.\n   *\n   * @param {number} bytesSent  Number of bytes sent to the server.\n   * @param {number} bytesTotal Total number of bytes to be sent to the server.\n   * @api private\n   */\n  _emitProgress(bytesSent, bytesTotal) {\n    if (typeof this.options.onProgress === 'function') {\n      this.options.onProgress(bytesSent, bytesTotal)\n    }\n  }\n\n  /**\n   * Publishes notification when a chunk of data has been sent to the server\n   * and accepted by the server.\n   * @param {number} chunkSize  Size of the chunk that was accepted by the server.\n   * @param {number} bytesAccepted Total number of bytes that have been\n   *                                accepted by the server.\n   * @param {number} bytesTotal Total number of bytes to be sent to the server.\n   * @api private\n   */\n  _emitChunkComplete(chunkSize, bytesAccepted, bytesTotal) {\n    if (typeof this.options.onChunkComplete === 'function') {\n      this.options.onChunkComplete(chunkSize, bytesAccepted, bytesTotal)\n    }\n  }\n\n  /**\n   * Create a new upload using the creation extension by sending a POST\n   * request to the endpoint. After successful creation the file will be\n   * uploaded\n   *\n   * @api private\n   */\n  _createUpload() {\n    if (!this.options.endpoint) {\n      this._emitError(new Error('tus: unable to create upload because no endpoint is provided'))\n      return\n    }\n\n    const req = this._openRequest('POST', this.options.endpoint)\n\n    if (this.options.uploadLengthDeferred) {\n      req.setHeader('Upload-Defer-Length', 1)\n    } else {\n      req.setHeader('Upload-Length', this._size)\n    }\n\n    // Add metadata if values have been added\n    const metadata = encodeMetadata(this.options.metadata)\n    if (metadata !== '') {\n      req.setHeader('Upload-Metadata', metadata)\n    }\n\n    let promise\n    if (this.options.uploadDataDuringCreation && !this.options.uploadLengthDeferred) {\n      this._offset = 0\n      promise = this._addChunkToRequest(req)\n    } else {\n      if (this.options.protocol === PROTOCOL_IETF_DRAFT_03) {\n        req.setHeader('Upload-Complete', '?0')\n      }\n      promise = this._sendRequest(req, null)\n    }\n\n    promise\n      .then((res) => {\n        if (!inStatusCategory(res.getStatus(), 200)) {\n          this._emitHttpError(req, res, 'tus: unexpected response while creating upload')\n          return\n        }\n\n        const location = res.getHeader('Location')\n        if (location == null) {\n          this._emitHttpError(req, res, 'tus: invalid or missing Location header')\n          return\n        }\n\n        this.url = resolveUrl(this.options.endpoint, location)\n        log(`Created upload at ${this.url}`)\n\n        if (typeof this.options.onUploadUrlAvailable === 'function') {\n          this.options.onUploadUrlAvailable()\n        }\n\n        if (this._size === 0) {\n          // Nothing to upload and file was successfully created\n          this._emitSuccess()\n          this._source.close()\n          return\n        }\n\n        this._saveUploadInUrlStorage().then(() => {\n          if (this.options.uploadDataDuringCreation) {\n            this._handleUploadResponse(req, res)\n          } else {\n            this._offset = 0\n            this._performUpload()\n          }\n        })\n      })\n      .catch((err) => {\n        this._emitHttpError(req, null, 'tus: failed to create upload', err)\n      })\n  }\n\n  /*\n   * Try to resume an existing upload. First a HEAD request will be sent\n   * to retrieve the offset. If the request fails a new upload will be\n   * created. In the case of a successful response the file will be uploaded.\n   *\n   * @api private\n   */\n  _resumeUpload() {\n    const req = this._openRequest('HEAD', this.url)\n    const promise = this._sendRequest(req, null)\n\n    promise\n      .then((res) => {\n        const status = res.getStatus()\n        if (!inStatusCategory(status, 200)) {\n          // If the upload is locked (indicated by the 423 Locked status code), we\n          // emit an error instead of directly starting a new upload. This way the\n          // retry logic can catch the error and will retry the upload. An upload\n          // is usually locked for a short period of time and will be available\n          // afterwards.\n          if (status === 423) {\n            this._emitHttpError(req, res, 'tus: upload is currently locked; retry later')\n            return\n          }\n\n          if (inStatusCategory(status, 400)) {\n            // Remove stored fingerprint and corresponding endpoint,\n            // on client errors since the file can not be found\n            this._removeFromUrlStorage()\n          }\n\n          if (!this.options.endpoint) {\n            // Don't attempt to create a new upload if no endpoint is provided.\n            this._emitHttpError(\n              req,\n              res,\n              'tus: unable to resume upload (new upload cannot be created without an endpoint)',\n            )\n            return\n          }\n\n          // Try to create a new upload\n          this.url = null\n          this._createUpload()\n          return\n        }\n\n        const offset = parseInt(res.getHeader('Upload-Offset'), 10)\n        if (Number.isNaN(offset)) {\n          this._emitHttpError(req, res, 'tus: invalid or missing offset value')\n          return\n        }\n\n        const length = parseInt(res.getHeader('Upload-Length'), 10)\n        if (\n          Number.isNaN(length) &&\n          !this.options.uploadLengthDeferred &&\n          this.options.protocol === PROTOCOL_TUS_V1\n        ) {\n          this._emitHttpError(req, res, 'tus: invalid or missing length value')\n          return\n        }\n\n        if (typeof this.options.onUploadUrlAvailable === 'function') {\n          this.options.onUploadUrlAvailable()\n        }\n\n        this._saveUploadInUrlStorage().then(() => {\n          // Upload has already been completed and we do not need to send additional\n          // data to the server\n          if (offset === length) {\n            this._emitProgress(length, length)\n            this._emitSuccess()\n            return\n          }\n\n          this._offset = offset\n          this._performUpload()\n        })\n      })\n      .catch((err) => {\n        this._emitHttpError(req, null, 'tus: failed to resume upload', err)\n      })\n  }\n\n  /**\n   * Start uploading the file using PATCH requests. The file will be divided\n   * into chunks as specified in the chunkSize option. During the upload\n   * the onProgress event handler may be invoked multiple times.\n   *\n   * @api private\n   */\n  _performUpload() {\n    // If the upload has been aborted, we will not send the next PATCH request.\n    // This is important if the abort method was called during a callback, such\n    // as onChunkComplete or onProgress.\n    if (this._aborted) {\n      return\n    }\n\n    let req\n\n    // Some browser and servers may not support the PATCH method. For those\n    // cases, you can tell tus-js-client to use a POST request with the\n    // X-HTTP-Method-Override header for simulating a PATCH request.\n    if (this.options.overridePatchMethod) {\n      req = this._openRequest('POST', this.url)\n      req.setHeader('X-HTTP-Method-Override', 'PATCH')\n    } else {\n      req = this._openRequest('PATCH', this.url)\n    }\n\n    req.setHeader('Upload-Offset', this._offset)\n    const promise = this._addChunkToRequest(req)\n\n    promise\n      .then((res) => {\n        if (!inStatusCategory(res.getStatus(), 200)) {\n          this._emitHttpError(req, res, 'tus: unexpected response while uploading chunk')\n          return\n        }\n\n        this._handleUploadResponse(req, res)\n      })\n      .catch((err) => {\n        // Don't emit an error if the upload was aborted manually\n        if (this._aborted) {\n          return\n        }\n\n        this._emitHttpError(req, null, `tus: failed to upload chunk at offset ${this._offset}`, err)\n      })\n  }\n\n  /**\n   * _addChunktoRequest reads a chunk from the source and sends it using the\n   * supplied request object. It will not handle the response.\n   *\n   * @api private\n   */\n  _addChunkToRequest(req) {\n    const start = this._offset\n    let end = this._offset + this.options.chunkSize\n\n    req.setProgressHandler((bytesSent) => {\n      this._emitProgress(start + bytesSent, this._size)\n    })\n\n    req.setHeader('Content-Type', 'application/offset+octet-stream')\n\n    // The specified chunkSize may be Infinity or the calcluated end position\n    // may exceed the file's size. In both cases, we limit the end position to\n    // the input's total size for simpler calculations and correctness.\n    if ((end === Infinity || end > this._size) && !this.options.uploadLengthDeferred) {\n      end = this._size\n    }\n\n    return this._source.slice(start, end).then(({ value, done }) => {\n      const valueSize = value && value.size ? value.size : 0\n\n      // If the upload length is deferred, the upload size was not specified during\n      // upload creation. So, if the file reader is done reading, we know the total\n      // upload size and can tell the tus server.\n      if (this.options.uploadLengthDeferred && done) {\n        this._size = this._offset + valueSize\n        req.setHeader('Upload-Length', this._size)\n      }\n\n      // The specified uploadSize might not match the actual amount of data that a source\n      // provides. In these cases, we cannot successfully complete the upload, so we\n      // rather error out and let the user know. If not, tus-js-client will be stuck\n      // in a loop of repeating empty PATCH requests.\n      // See https://community.transloadit.com/t/how-to-abort-hanging-companion-uploads/16488/13\n      const newSize = this._offset + valueSize\n      if (!this.options.uploadLengthDeferred && done && newSize !== this._size) {\n        return Promise.reject(\n          new Error(\n            `upload was configured with a size of ${this._size} bytes, but the source is done after ${newSize} bytes`,\n          ),\n        )\n      }\n\n      if (value === null) {\n        return this._sendRequest(req)\n      }\n\n      if (this.options.protocol === PROTOCOL_IETF_DRAFT_03) {\n        req.setHeader('Upload-Complete', done ? '?1' : '?0')\n      }\n      this._emitProgress(this._offset, this._size)\n      return this._sendRequest(req, value)\n    })\n  }\n\n  /**\n   * _handleUploadResponse is used by requests that haven been sent using _addChunkToRequest\n   * and already have received a response.\n   *\n   * @api private\n   */\n  _handleUploadResponse(req, res) {\n    const offset = parseInt(res.getHeader('Upload-Offset'), 10)\n    if (Number.isNaN(offset)) {\n      this._emitHttpError(req, res, 'tus: invalid or missing offset value')\n      return\n    }\n\n    this._emitProgress(offset, this._size)\n    this._emitChunkComplete(offset - this._offset, offset, this._size)\n\n    this._offset = offset\n\n    if (offset === this._size) {\n      // Yay, finally done :)\n      this._emitSuccess()\n      this._source.close()\n      return\n    }\n\n    this._performUpload()\n  }\n\n  /**\n   * Create a new HTTP request object with the given method and URL.\n   *\n   * @api private\n   */\n  _openRequest(method, url) {\n    const req = openRequest(method, url, this.options)\n    this._req = req\n    return req\n  }\n\n  /**\n   * Remove the entry in the URL storage, if it has been saved before.\n   *\n   * @api private\n   */\n  _removeFromUrlStorage() {\n    if (!this._urlStorageKey) return\n\n    this._urlStorage.removeUpload(this._urlStorageKey).catch((err) => {\n      this._emitError(err)\n    })\n    this._urlStorageKey = null\n  }\n\n  /**\n   * Add the upload URL to the URL storage, if possible.\n   *\n   * @api private\n   */\n  _saveUploadInUrlStorage() {\n    // We do not store the upload URL\n    // - if it was disabled in the option, or\n    // - if no fingerprint was calculated for the input (i.e. a stream), or\n    // - if the URL is already stored (i.e. key is set alread).\n    if (\n      !this.options.storeFingerprintForResuming ||\n      !this._fingerprint ||\n      this._urlStorageKey !== null\n    ) {\n      return Promise.resolve()\n    }\n\n    const storedUpload = {\n      size: this._size,\n      metadata: this.options.metadata,\n      creationTime: new Date().toString(),\n    }\n\n    if (this._parallelUploads) {\n      // Save multiple URLs if the parallelUploads option is used ...\n      storedUpload.parallelUploadUrls = this._parallelUploadUrls\n    } else {\n      // ... otherwise we just save the one available URL.\n      storedUpload.uploadUrl = this.url\n    }\n\n    return this._urlStorage.addUpload(this._fingerprint, storedUpload).then((urlStorageKey) => {\n      this._urlStorageKey = urlStorageKey\n    })\n  }\n\n  /**\n   * Send a request with the provided body.\n   *\n   * @api private\n   */\n  _sendRequest(req, body = null) {\n    return sendRequest(req, body, this.options)\n  }\n}\n\nfunction encodeMetadata(metadata) {\n  return Object.entries(metadata)\n    .map(([key, value]) => `${key} ${btoa(String(value))}`)\n    .join(',')\n}\n\n/**\n * Checks whether a given status is in the range of the expected category.\n * For example, only a status between 200 and 299 will satisfy the category 200.\n *\n * @api private\n */\nfunction inStatusCategory(status, category) {\n  return status >= category && status < category + 100\n}\n\n/**\n * Create a new HTTP request with the specified method and URL.\n * The necessary headers that are included in every request\n * will be added, including the request ID.\n *\n * @api private\n */\nfunction openRequest(method, url, options) {\n  const req = options.httpStack.createRequest(method, url)\n\n  if (options.protocol === PROTOCOL_IETF_DRAFT_03) {\n    req.setHeader('Upload-Draft-Interop-Version', '5')\n  } else {\n    req.setHeader('Tus-Resumable', '1.0.0')\n  }\n  const headers = options.headers || {}\n\n  Object.entries(headers).forEach(([name, value]) => {\n    req.setHeader(name, value)\n  })\n\n  if (options.addRequestId) {\n    const requestId = uuid()\n    req.setHeader('X-Request-ID', requestId)\n  }\n\n  return req\n}\n\n/**\n * Send a request with the provided body while invoking the onBeforeRequest\n * and onAfterResponse callbacks.\n *\n * @api private\n */\nasync function sendRequest(req, body, options) {\n  if (typeof options.onBeforeRequest === 'function') {\n    await options.onBeforeRequest(req)\n  }\n\n  const res = await req.send(body)\n\n  if (typeof options.onAfterResponse === 'function') {\n    await options.onAfterResponse(req, res)\n  }\n\n  return res\n}\n\n/**\n * Checks whether the browser running this code has internet access.\n * This function will always return true in the node.js environment\n *\n * @api private\n */\nfunction isOnline() {\n  let online = true\n  // Note: We don't reference `window` here because the navigator object also exists\n  // in a Web Worker's context.\n  // eslint-disable-next-line no-undef\n  if (typeof navigator !== 'undefined' && navigator.onLine === false) {\n    online = false\n  }\n\n  return online\n}\n\n/**\n * Checks whether or not it is ok to retry a request.\n * @param {Error|DetailedError} err the error returned from the last request\n * @param {number} retryAttempt the number of times the request has already been retried\n * @param {object} options tus Upload options\n *\n * @api private\n */\nfunction shouldRetry(err, retryAttempt, options) {\n  // We only attempt a retry if\n  // - retryDelays option is set\n  // - we didn't exceed the maxium number of retries, yet, and\n  // - this error was caused by a request or it's response and\n  // - the error is server error (i.e. not a status 4xx except a 409 or 423) or\n  // a onShouldRetry is specified and returns true\n  // - the browser does not indicate that we are offline\n  if (\n    options.retryDelays == null ||\n    retryAttempt >= options.retryDelays.length ||\n    err.originalRequest == null\n  ) {\n    return false\n  }\n\n  if (options && typeof options.onShouldRetry === 'function') {\n    return options.onShouldRetry(err, retryAttempt, options)\n  }\n\n  return defaultOnShouldRetry(err)\n}\n\n/**\n * determines if the request should be retried. Will only retry if not a status 4xx except a 409 or 423\n * @param {DetailedError} err\n * @returns {boolean}\n */\nfunction defaultOnShouldRetry(err) {\n  const status = err.originalResponse ? err.originalResponse.getStatus() : 0\n  return (!inStatusCategory(status, 400) || status === 409 || status === 423) && isOnline()\n}\n\n/**\n * Resolve a relative link given the origin as source. For example,\n * if a HTTP request to http://example.com/files/ returns a Location\n * header with the value /upload/abc, the resolved URL will be:\n * http://example.com/upload/abc\n */\nfunction resolveUrl(origin, link) {\n  return new URL(link, origin).toString()\n}\n\n/**\n * Calculate the start and end positions for the parts if an upload\n * is split into multiple parallel requests.\n *\n * @param {number} totalSize The byte size of the upload, which will be split.\n * @param {number} partCount The number in how many parts the upload will be split.\n * @return {object[]}\n * @api private\n */\nfunction splitSizeIntoParts(totalSize, partCount) {\n  const partSize = Math.floor(totalSize / partCount)\n  const parts = []\n\n  for (let i = 0; i < partCount; i++) {\n    parts.push({\n      start: partSize * i,\n      end: partSize * (i + 1),\n    })\n  }\n\n  parts[partCount - 1].end = totalSize\n\n  return parts\n}\n\nBaseUpload.defaultOptions = defaultOptions\n\nexport default BaseUpload\n",
    "/**\n * Generate a UUID v4 based on random numbers. We intentioanlly use the less\n * secure Math.random function here since the more secure crypto.getRandomNumbers\n * is not available on all platforms.\n * This is not a problem for us since we use the UUID only for generating a\n * request ID, so we can correlate server logs to client errors.\n *\n * This function is taken from following site:\n * https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n *\n * @return {string} The generate UUID\n */\nexport default function uuid() {\n  /* eslint-disable no-bitwise */\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0\n    const v = c === 'x' ? r : (r & 0x3) | 0x8\n    return v.toString(16)\n  })\n}\n"
  ]
}